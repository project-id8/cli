name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      release_as:
        description: "Force release type (optional)"
        required: false
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
        default: "auto"
      pre_release:
        description: "Pre-release tag (optional, e.g. alpha, beta, rc)"
        required: false
        type: string
      dry_run:
        description: "Dry run (validate without making changes)"
        required: false
        type: boolean
        default: false

jobs:
  validate:
    name: Validate
    uses: ./.github/workflows/validate.yml

  prepare:
    name: Prepare Release
    needs: validate
    if: |
      needs.validate.outputs.commit_check != 'failure' &&
      needs.validate.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create Release
        id: create_release
        run: |
          # Build fork-version arguments
          ARGS=""

          # Add release type if specified
          if [ "${{ github.event.inputs.release_as }}" != "auto" ]; then
            ARGS="$ARGS --release-as ${{ github.event.inputs.release_as }}"
          fi

          # Add pre-release tag if specified
          if [ -n "${{ github.event.inputs.pre_release }}" ]; then
            ARGS="$ARGS --pre-release-tag ${{ github.event.inputs.pre_release }}"
          fi

          # Add dry-run if specified
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            ARGS="$ARGS --dry-run"
          fi

          echo "Running fork-version with arguments: $ARGS"

          # First do a dry run to capture the next version
          # Capture both stdout and stderr
          set +e  # Disable automatic exit on error
          RESULT=$(npx fork-version $ARGS --dry-run --inspect-version 2>&1)
          EXIT_CODE=$?
          set -e  # Re-enable automatic exit on error

          echo "Command output:"
          echo "$RESULT"

          # If there was an error, show the full output and exit
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Error: fork-version failed with exit code $EXIT_CODE"
            exit 1
          fi

          # Get the last line which should be the version
          NEXT_VERSION=$(echo "$RESULT" | tail -n1)

          if [ -z "$NEXT_VERSION" ]; then
            echo "Error: Could not determine next version"
            exit 1
          fi

          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT

          if [ "${{ github.event.inputs.dry_run }}" == "false" ]; then
            # Actually create the release
            npx fork-version $ARGS
          else
            echo "Dry run completed. Would create version: ${NEXT_VERSION}"
          fi

      - name: Push changes
        if: github.event.inputs.dry_run != 'true'
        run: git push --follow-tags

    outputs:
      version: ${{ steps.create_release.outputs.next_version }}
